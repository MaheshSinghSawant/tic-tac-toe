{"version":3,"sources":["Button/Button.tsx","SizeInput/SizeInput.tsx","calculateVictory.ts","Board/Board.tsx","Game/Game.tsx","index.js"],"names":["Button","_ref","text","onClickHandler","react_default","a","createElement","className","onClick","SizeInput","onSubmitHandler","_React$useState","React","useState","value","error","_React$useState2","Object","slicedToArray","state","setState","handleSubmit","numericalValue","parseInt","isNaN","objectSpread","autoFocus","type","onChange","e","target","onKeyDown","key","Button_Button","isAllX","arr","every","ele","isAllO","Board","size","board","Array","map","cellSize","player1","winner","useEffect","fill","handleClick","row","col","newBoard","colValues","i","length","push","diagonalArr","reverseDiagonalArr","calculateWinner","restartButton","window","location","reload","concat","ridx","cidx","content","style","height","width","fontSize","Game","boardSize","Board_Board","SizeInput_SizeInput","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.7161a6c9.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Button.css\"\n\ninterface IButtonProps {\n  /**\n   * text to be shown\n   */\n  text: string\n  /**\n   * handle click\n   */\n  onClickHandler: () => void\n}\n\nexport function Button({ text, onClickHandler }: IButtonProps) {\n  return <div className=\"Button u-largeFont u-flexCenter\" onClick={onClickHandler}>{text}</div>\n}\n","import React from \"react\"\nimport \"./SizeInput.css\"\nimport { Button } from \"../Button/Button\"\n\ninterface ISizeInputProps {\n  /**\n   * A submit handler functions which updates board size in Game\n   */\n  onSubmitHandler: (value: number) => void\n}\n\nexport function SizeInput({ onSubmitHandler }: ISizeInputProps) {\n  // Input value is stored in state\n  const [state, setState] = React.useState({\n    value: \"\",\n    error: \"\"\n  })\n\n  // when the user enters value in input field, update state\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e &&\n      e.target &&\n      e.target.value &&\n      setState({ ...state, value: e.target.value })\n  }\n\n  // when Create Game button is clicked, create execute the onSubmitHandler\n  // if input is not valid, show error\n  const handleSubmit = () => {\n    let numericalValue = parseInt(state.value, 10)\n    if (numericalValue <= 1 || isNaN(numericalValue)) {\n      setState({\n        ...state,\n        error: \"Please enter positive interger greater than 1\"\n      })\n    } else {\n      onSubmitHandler(numericalValue)\n    }\n  }\n\n  // pressing enter also submits\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e && e.key && e.key === \"Enter\") {\n      handleSubmit()\n    }\n  }\n\n  return (\n    <div className=\"SizeInput\">\n      <div className=\"u-extraLargeFont\">Tic-Tac-Toe</div>\n      <div className=\"SizeInput-inputHeader u-mediumFont u-colorTheme\">Enter desired size of board</div>\n      <input\n        autoFocus={true}\n        className=\"SizeInput-inputField u-largeFont\"\n        type=\"text\"\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n      />\n      <Button text={\"start game\"} onClickHandler={handleSubmit} />\n      {state.error && <div className=\"SizeInput-error u-mediumFont\">{state.error}</div>}\n    </div>\n  )\n}\n","// the function that checks if there is a winner in the grid\n// the logic is as follows:\n\n// We know which row and col were changed by the click and they are available as input args\n// 1. check if all cells in same row are of the same value, if so that value wins\n// 2. check if all cells in same column are of the same value, if so that value wins\n// 3. check diagonal and reverse diagonals for same value and if so, that value wins\n\n// check if each element is 1\nconst isAllX = (arr: any) => {\n  return arr.every((ele: number) => ele === 1)\n}\n// check if each element is -1\nconst isAllO = (arr: any) => {\n  return arr.every((ele: number) => ele === -1)\n}\n\nexport function calculateWinner(row: number, col: number, board: any) {\n  // create a list of all values in same column\n  let colValues = []\n  for (let i = 0; i < board.length; i++) {\n    colValues.push(board[i][col])\n  }\n\n  // fill diagonal array in linear time\n  let diagonalArr = []\n  for (let i = 0; i < board.length; i++) {\n    diagonalArr.push(board[i][i])\n  }\n\n  // fill reverse diagonal in linear time\n  let reverseDiagonalArr = []\n  for (let i = 0; i < board.length; i++) {\n    reverseDiagonalArr.push(board[i][board.length - 1 - i])\n  }\n\n  if (\n    isAllX(board[row]) ||\n    isAllX(colValues) ||\n    isAllX(diagonalArr) ||\n    isAllX(reverseDiagonalArr)\n  ) {\n    return 1\n  }\n\n  if (\n    isAllO(board[row]) ||\n    isAllO(colValues) ||\n    isAllO(diagonalArr) ||\n    isAllO(reverseDiagonalArr)\n  ) {\n    return 2\n  }\n\n  return 0\n}\n","// Board component contains the tic tac toe game board where the user can click of board cells\n\nimport React from \"react\"\nimport \"./Board.css\"\nimport { Button } from \"../Button/Button\"\nimport { calculateWinner } from \"../calculateVictory\"\n\ninterface IBoardProps {\n  /**\n   * The size N used to create an N x N board\n   */\n  size: number\n}\n\nexport function Board({ size }: IBoardProps) {\n  // Inital state vaues\n  const [state, setState] = React.useState({\n    // The size N x N board, initalized with size 0 and 0\n    board: new Array(0).map(() => new Array(0)),\n    // The height and width of each board cell\n    cellSize: 0,\n    // True if player 1 is playing, false if player 2 is playing\n    player1: true,\n    // winner = 1 if player1 wins or winner = 2 if player2 wins\n    winner: 0\n  })\n\n  // UseEffect with 'size' as second argument is used to re-render only when size is changed (usually first render)\n  // Create the N X N board and fill it with 0s\n  // This is the only step which takes O(N^2) time, calculating winner should be linear\n  React.useEffect(() => {\n    if (size > 0) {\n      setState({\n        ...state,\n        // 0 size array filled with 0s\n        board: new Array(size).fill(null).map(() => new Array(size).fill(0)),\n        cellSize: 720 / size\n      })\n    }\n  }, [size])\n\n  /* When a cell is clicked on extract the row and col value from the cell that was clicked\n   * update board with 1 if player 1 was playing so that an 'X' is shown in the cell\n   * or update board with -1 for other player, so that 'O 'is shown\n   *\n   * Also toggle player\n   */\n  const handleClick = (row: number, col: number) => {\n    let newBoard = state.board\n    newBoard[row][col] = state.player1 ? 1 : -1\n    let winner = calculateWinner(row, col, newBoard)\n    setState({\n      ...state,\n      board: newBoard,\n      player1: !state.player1,\n      winner: winner\n    })\n  }\n\n  /* Create the board, where each cell of the board represents an area where a user can click to create a cross or circle\n   * While creating the board we keep track of each cell's row and col index such that:\n   * --------------\n    |     |      |\n    | 0,0 |  0,1 |\n    |     |      |\n    --------------\n    |     |      |\n    | 1,0 |  1,1 |\n    |     |      |\n    --------------\n   * \n   */\n  const restartButton = (\n    <Button\n      text={\"Restart Game\"}\n      onClickHandler={() => window.location.reload()}\n    />\n  )\n\n  if (state.winner > 0) {\n    return (\n      <div className=\"Board-winnerModal u-flexCenter\">\n        <div className=\"u-extraLargeFont\">{`Player ${state.winner} Wins!`}</div>\n        {restartButton}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"Board-container\">\n      <div className=\"Board Board-content u-flexCenter\">\n        {state.board.map((row, ridx) => {\n          return row.map((col, cidx) => {\n            let content = \"\"\n            if (state.board[ridx][cidx] > 0) {\n              content = \"X\"\n            } else if (state.board[ridx][cidx] < 0) {\n              content = \"O\"\n            }\n            return (\n              <div\n                key={`cell-${ridx},${cidx}`}\n                onClick={() => handleClick(ridx, cidx)}\n                className=\"Board-cell u-flexCenter u-colorTheme\"\n                style={{\n                  height: state.cellSize,\n                  width: state.cellSize\n                }}\n              >\n                <div\n                  style={{\n                    fontSize: state.cellSize\n                  }}\n                >\n                  {content}\n                </div>\n              </div>\n            )\n          })\n        })}\n      </div>\n      <div className=\"Board Board-border\"></div>\n      <div className=\"Board-details\">\n        <div className=\"u-colorTheme u-largeFont\">Player 1 : X</div>\n        <div className=\"u-colorTheme u-largeFont\">Player 2 : O</div>\n        {restartButton}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { SizeInput } from \"../SizeInput/SizeInput\"\nimport { Board } from \"../Board/Board\"\n\nfunction Game() {\n  // When the game starts, ie when you land on the page\n  // size has not been entered yet so it is 0\n  const [state, setState] = React.useState({\n    boardSize: 0\n  })\n\n  // handle updating size of board when user enters value in SizeInput component\n  const handleInputSizeSubmit = (value: number) => {\n    setState({ boardSize: value })\n  }\n\n  // show the SizeInput component if board size is 0\n  if (!state.boardSize) {\n    return <SizeInput onSubmitHandler={handleInputSizeSubmit} />\n  }\n  return <Board size={state.boardSize} />\n}\n\nexport default Game\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Game from './Game/Game'\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}